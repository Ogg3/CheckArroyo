required_values
	['key', 'value']

send_state
	['send_state_type']

message_state
	['state_type']

conversation_identifier
	['client_conversation_id', 'server_conversation_id', 'client_resolution_id']
	CREATE TABLE conversation_identifier (
    client_conversation_id text primary key not null, -- UUID
    server_conversation_id text, -- nullable server UUID
    client_resolution_id integer -- nullable if conversation is committed or if this is a 1:1 conversation. We don't create 1:1 conversations.
)
conversation
	['client_conversation_id', 'conversation_metadata', 'send_state_type', 'creation_timestamp', 'conversation_version', 'sync_watermark', 'tombstoned_at_timestamp', 'nullable_sync_watermark', 'has_more_messages', 'source_page', 'last_senders']
	CREATE TABLE conversation (
    client_conversation_id text primary key not null,
    conversation_metadata blob not null,
    send_state_type text not null,
    creation_timestamp integer,
    conversation_version integer not null,
    sync_watermark integer not null, -- this field is deprecated
    tombstoned_at_timestamp integer, -- when this conversation was locally left by user
    nullable_sync_watermark integer, -- if the conversation has synced, the server message id we synced to. null if no sync has happened
    has_more_messages integer not null default 1, -- bool. if the queryMessagesResponse.has_more is true or false. Once the server says theres no more messages it doesn't change.
    source_page integer not null, -- creation source page of conversation. This is used for a business metric.
    last_senders blob,
    foreign key(client_conversation_id) references conversation_identifier(client_conversation_id)
    foreign key(send_state_type) references send_state(send_state_type)
)
conversation_message
	['client_conversation_id', 'client_message_id', 'server_message_id', 'client_resolution_id', 'local_message_content_id', 'message_content', 'message_state_type', 'creation_timestamp', 'read_timestamp', 'local_message_references', 'is_saved', 'is_viewed_by_user', 'remote_media_count', 'content_type', 'content_read_release_policy', 'released_by_count', 'sender_id', 'is_released_by_user', 'release_state', 'hidden_from_platform']
	CREATE TABLE conversation_message (
    client_conversation_id text not null,
    client_message_id integer not null,
    server_message_id integer,   -- server monotonically increasing id, nullable if pending message

    client_resolution_id integer, -- Not null. Intentionally not adding this as SQL constraint since we had null data
                                  -- in the past during internal testing.
    local_message_content_id integer, -- nullable if message wasn't created on this device
    message_content blob not null,
    message_state_type text not null,
    creation_timestamp integer not null,
    read_timestamp integer not null, -- timestamp when the message is first marked read by any participants
    local_message_references blob, -- if the message originates from the device we keep local media reference around to have stable local cache ids

    is_saved integer not null, -- bool. set to true iff message_content.metadata().saved_by_size() > 0
    is_viewed_by_user integer not null, -- bool. set to true iff message.content.metadata().read_by() contains current user
    remote_media_count integer not null, -- size of the media reference list message.content.contents().media_reference_lists_size()
    content_type integer not null, -- type of the content as defined in message.content.contents().content_type()
    content_read_release_policy integer not null, -- type of the content read release policy as defined in message.content.release_policy()
    released_by_count integer not null, -- size of message.content.metadata().released_by_size() list
    sender_id text, -- message.content.sender_id()
    is_released_by_user integer not null, -- bool. true iff message is released by user,  message.content.metadata().released_by() contains current user id
    release_state integer, -- enum. Release state of the message. Starts optional, not set for conversations that don't send release messages or messages that don't require individual release.
    hidden_from_platform integer not null default 0, -- bool Should hide this message from platform. Read/Release watermark and save state can override this value.

    primary key(client_conversation_id, client_message_id),
    unique (client_conversation_id, server_message_id),

    foreign key(client_conversation_id) references conversation_identifier(client_conversation_id),
    foreign key(message_state_type) references message_state(state_type),
    foreign key(local_message_content_id) references local_message_content(local_message_content_id)
)
local_message_content
	['local_message_content_id', 'content', 'local_message_references', 'metrics_message_type', 'platform_analytics', 'metrics_message_media_type', 'task_queue_id', 'state', 'client_resolution_id', 'send_timestamp', 'content_type', 'save_policy', 'incidental_attachments', 'missing_last_response']
	CREATE TABLE local_message_content (
    local_message_content_id integer primary key not null,
    content blob not null,
    local_message_references blob,
    metrics_message_type integer not null,
    platform_analytics blob,
    metrics_message_media_type integer not null,
    task_queue_id text not null, -- UUID to identify this send request in the external task queue
    state text not null, -- state of this send, references send_state
    client_resolution_id integer not null, -- randomly generated number used to pair client request with a server response
    send_timestamp integer not null, -- user started the message sending at this time, written by UserInitiated and UserRetry only
    content_type integer not null, -- type of the content
    save_policy integer not null default 0, -- save policy of the content, should match djinni::SavePolicy
    incidental_attachments blob not null default x'', -- attachments to the host mail
    missing_last_response integer not null default 0, -- whether the most recent sending misses CreateContentMessageResponse from server. Set to true when sending, set to false if heard from server

    foreign key(state) references send_state(send_state_type),
    foreign key(task_queue_id) references flow_orchestration_task(task_queue_id),
    check (state in ("PREPARING", "SENDING", "FAILED"))
)
flow_orchestration_task
	['task_queue_id', 'order_id', 'starting_timestamp_ms', 'retry_count', 'mutation_type', 'order_grouping', 'order_key', 'operation_attempt_type']
	CREATE TABLE flow_orchestration_task (
    task_queue_id text primary key not null, -- UUID unique per task on the device for external task queue
    order_id integer not null, -- ascending order id unique within the native API.
    starting_timestamp_ms integer not null,
    retry_count integer not null,
    mutation_type integer not null,
    order_grouping integer not null,
    order_key integer not null, -- either 1 or multiple UUIDs hashed to identify conversation or a multi recipient send
    operation_attempt_type integer not null -- what started an operation attempt, should match djinni::OperationAttemptType
)
conversation_local_message_content
	['client_conversation_id', 'local_message_content_id', 'client_message_id']
	CREATE TABLE conversation_local_message_content (
    client_conversation_id text not null,
    local_message_content_id integer not null,
    client_message_id integer, -- null IFF this is a multi recipient send since we don't show a message in the conversation for multirecipient messages

    primary key(client_conversation_id, local_message_content_id),
    foreign key(local_message_content_id) references local_message_content(local_message_content_id),
    foreign key(client_conversation_id, client_message_id) references conversation_message(client_conversation_id, client_message_id)
)
story_local_message_content
	['story_id', 'local_message_content_id', 'destination_data']
	CREATE TABLE story_local_message_content (
    story_id text not null, -- uuid of the story destination, this is just use for tracking failures in the sendflow
    local_message_content_id integer not null,
    destination_data blob not null, -- pb_search data for this destination. This is just passed through the sendflow to the stories backend.

    primary key(story_id, local_message_content_id),
    foreign key(local_message_content_id) references local_message_content(local_message_content_id)
)
update_conversation_message
	['reference_client_conversation_id', 'reference_client_message_id', 'client_resolution_id', 'request', 'send_state_type', 'creation_timestamp', 'task_queue_id', 'update_case']
	CREATE TABLE update_conversation_message (
    reference_client_conversation_id text not null,
    reference_client_message_id integer not null, -- message being applied update
    client_resolution_id integer, -- null means waiting for dependent conversation/message
    request blob not null, -- network request protobuf object serialized
    send_state_type text not null,
    creation_timestamp integer not null,
    task_queue_id text not null unique,
    update_case integer not null, -- set to int value of request.update().update_case()

    primary key(reference_client_conversation_id, reference_client_message_id, client_resolution_id),

    foreign key(reference_client_conversation_id, reference_client_message_id) references conversation_message(client_conversation_id, client_message_id),
    foreign key(send_state_type) references send_state(send_state_type),
    foreign key(task_queue_id) references flow_orchestration_task(task_queue_id),

    check (send_state_type in ("PREPARING", "SENDING", "FAILED"))
)
update_conversation
	['reference_client_conversation_id', 'client_resolution_id', 'message_content', 'send_state_type', 'creation_timestamp', 'conversation_version', 'task_queue_id']
	CREATE TABLE update_conversation (
    reference_client_conversation_id text not null,
    client_resolution_id integer, -- null means waiting for dependent conversation/message
    message_content blob not null,
    send_state_type text not null,  -- indicates message send state PENDING vs COMMITTED
    creation_timestamp integer not null,
    conversation_version integer not null,
    task_queue_id text not null unique,

    primary key(reference_client_conversation_id, client_resolution_id),

    foreign key(reference_client_conversation_id) references conversation_identifier(client_conversation_id),
    foreign key(send_state_type) references send_state(send_state_type),
    foreign key(task_queue_id) references flow_orchestration_task(task_queue_id),

    check (send_state_type in ("PREPARING", "SENDING", "FAILED"))
)
feed_sync
	['sentinel', 'token']

feed_entry
	['client_conversation_id', 'version_id', 'last_updated_timestamp', 'display_timestamp', 'message_type', 'message_state', 'viewed', 'conversation_title', 'conversation_type', 'legacyConversationInfo', 'legacyMigrationInfo', 'legacyNeedsSync', 'participants', 'lastActors', 'feedItemCreator', 'priority', 'last_received_chat_id', 'last_viewed_chat_id', 'last_chat_sender', 'unviewed_silent_snaps', 'unviewed_audio_snaps', 'unviewed_silent_snaps_timestamps', 'unviewed_audio_snaps_timestamps', 'last_sender', 'tombstoned', 'owning_snap', 'clear_conversation_timestamp_ms', 'last_sent_chat_server_id', 'streak_count', 'streak_expiration_timestamp_ms', 'streak_version', 'chat_notification_preference', 'game_notification_preference', 'is_friendlink_pending', 'feed_visibility']
	CREATE TABLE feed_entry (
    client_conversation_id text primary key not null,
    version_id integer not null,
    last_updated_timestamp integer not null,
    display_timestamp integer not null,
    message_type integer not null,
    message_state integer not null,
    viewed integer not null,
    conversation_title text,
    conversation_type integer not null,
    legacyConversationInfo blob,
    legacyMigrationInfo blob,
    legacyNeedsSync integer not null,
    participants blob,
    lastActors blob,
    feedItemCreator text,
    priority integer not null,
    last_received_chat_id integer,
    last_viewed_chat_id integer,
    last_chat_sender text,
    unviewed_silent_snaps blob,
    unviewed_audio_snaps blob,
    unviewed_silent_snaps_timestamps blob,
    unviewed_audio_snaps_timestamps blob,
    last_sender blob,
    tombstoned integer not null,
    owning_snap integer,
    clear_conversation_timestamp_ms integer,
    last_sent_chat_server_id integer,
    streak_count integer,
    streak_expiration_timestamp_ms integer,
    streak_version integer,
    chat_notification_preference integer not null, -- Chat notification setting preference, should match enum djinni::NotificationPreference
    game_notification_preference integer not null, -- Game notification setting preference, should match enum djinni::NotificationPreference
    is_friendlink_pending integer not null, -- set to true if the friend link is pending. matches friendlinkpending on conversationmetadata.requester_info
    feed_visibility integer not null, --enum for the visibility state of a conversation. matches the friendfeedvisiblity on conversationmetadata.requester_info
    foreign key(client_conversation_id) references conversation_identifier(client_conversation_id)
)
user_conversation
	['user_id', 'client_conversation_id', 'conversation_type']

snap_download_status_info
	['client_conversation_id', 'client_message_id', 'server_message_id', 'download_status']

integer_id
	['id_type', 'id_value']

